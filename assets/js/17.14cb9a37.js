(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{214:function(e,n,t){"use strict";t.r(n);var _=t(0),a=Object(_.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"tcp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp","aria-hidden":"true"}},[e._v("#")]),e._v(" tcp")]),e._v(" "),t("h2",{attrs:{id:"三次握手四次挥手"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三次握手四次挥手","aria-hidden":"true"}},[e._v("#")]),e._v(" 三次握手四次挥手")]),e._v(" "),t("p",[t("strong",[e._v("三次握手：")]),e._v("\n所谓"),t("strong",[e._v("三次握手")]),e._v("(Three-way Handshake)，是指建立一个 TCP 连接时，需要客户端和服务器总共发送3个包。\n三次握手的目的是连接服务器指定端口，建立 TCP 连接，并同步连接双方的序列号和确认号，交换 TCP 窗口大小信息。在 socket 编程中，客户端执行 "),t("code",[e._v("connect()")]),e._v(" 时。将触发三次握手。")]),e._v(" "),t("ul",[t("li",[e._v("第一次握手(SYN=1, seq=x):\n客户端发送一个 TCP 的 SYN 标志位置1的包，指明客户端打算连接的服务器的端口，以及初始序号 X,保存在包头的序列号(Sequence Number)字段里。\n发送完毕后，客户端进入 "),t("code",[e._v("SYN_SEND")]),e._v(" 状态。")]),e._v(" "),t("li",[e._v("第二次握手(SYN=1, ACK=1, seq=y, ACKnum=x+1):\n服务器发回确认包(ACK)应答。即 SYN 标志位和 ACK 标志位均为1。服务器端选择自己 ISN 序列号，放到 Seq 域里，同时将确认序号(Acknowledgement Number)设置为客户的 ISN 加1，即X+1。 发送完毕后，服务器端进入 "),t("code",[e._v("SYN_RCVD")]),e._v(" 状态。")]),e._v(" "),t("li",[e._v("第三次握手(ACK=1，ACKnum=y+1)\n客户端再次发送确认包(ACK)，SYN 标志位为0，ACK 标志位为1，并且把服务器发来 ACK 的序号字段+1，放在确定字段中发送给对方，并且在数据段放写ISN的+1\n发送完毕后，客户端进入 "),t("code",[e._v("ESTABLISHED")]),e._v(" 状态，当服务器端接收到这个包时，也进入 "),t("code",[e._v("ESTABLISHED")]),e._v("状态，TCP 握手结束。\n"),t("img",{attrs:{src:"https://raw.githubusercontent.com/HIT-Alibaba/interview/master/img/tcp-connection-made-three-way-handshake.png",alt:"three-way-handshake"}}),e._v("\n![屏幕快照 2019-09-07 上午11.40.21](/Users/mucheng/Desktop/屏幕快照 2019-09-07 上午11.40.21.png)四次挥手**\nTCP 的连接的拆除需要发送四个包，因此称为"),t("strong",[e._v("四次挥手")]),e._v("(Four-way handshake)，也叫做改进的三次握手。客户端或服务器均可主动发起挥手动作，在 socket 编程中，任何一方执行 "),t("code",[e._v("close()")]),e._v(" 操作即可产生挥手操作。")]),e._v(" "),t("li",[e._v("第一次挥手(FIN=1，seq=x)\n假设客户端想要关闭连接，客户端发送一个 FIN 标志位置为1的包，表示自己已经没有数据可以发送了，但是仍然可以接受数据。\n发送完毕后，客户端进入 "),t("code",[e._v("FIN_WAIT_1")]),e._v(" 状态。")]),e._v(" "),t("li",[e._v("第二次挥手(ACK=1，ACKnum=x+1)\n服务器端确认客户端的 FIN 包，发送一个确认包，表明自己接受到了客户端关闭连接的请求，但还没有准备好关闭连接。\n发送完毕后，服务器端进入 "),t("code",[e._v("CLOSE_WAIT")]),e._v(" 状态，客户端接收到这个确认包之后，进入 "),t("code",[e._v("FIN_WAIT_2")]),e._v(" 状态，等待服务器端关闭连接。")]),e._v(" "),t("li",[e._v("第三次挥手(FIN=1，seq=y)\n服务器端准备好关闭连接时，向客户端发送结束连接请求，FIN 置为1。\n发送完毕后，服务器端进入 "),t("code",[e._v("LAST_ACK")]),e._v(" 状态，等待来自客户端的最后一个ACK。")]),e._v(" "),t("li",[e._v("第四次挥手(ACK=1，ACKnum=y+1)\n客户端接收到来自服务器端的关闭请求，发送一个确认包，并进入 "),t("code",[e._v("TIME_WAIT")]),e._v("状态，等待可能出现的要求重传的 ACK 包。\n服务器端接收到这个确认包之后，关闭连接，进入 "),t("code",[e._v("CLOSED")]),e._v(" 状态。\n客户端等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 "),t("code",[e._v("CLOSED")]),e._v(" 状态。\n"),t("img",{attrs:{src:"https://raw.githubusercontent.com/HIT-Alibaba/interview/master/img/tcp-connection-closed-four-way-handshake.png",alt:"four-way-handshake"}})])])])}),[],!1,null,null,null);n.default=a.exports}}]);